% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{rotate_cache}
\alias{rotate_cache}
\title{Rotate the Contents of a View Cache}
\usage{
rotate_cache(connection_name, view_name, view_grants = c())
}
\arguments{
\item{connection_name}{The snake_case name of the connection.}

\item{view_name}{Caches will be rotated for this view.}

\item{view_grants}{The names of database roles to grant SELECT permissions.
Defaults to none.}
}
\description{
This function will initialize a double-replicate cache of the passed view
and create a view named \verb{C<VIEW_NAME>} pointing to the first replicate.
Each time you call \code{rotate_cache} with the same \code{connection_name} and
\code{view_name}, the stale (not shown) replicate will be truncated and
refreshed with data from \code{view_name} and the view \verb{C<VIEW_NAME>} will be
replaced to point to it.
}
\details{
Note: The view you replicate should not return columns named KEY or
AUDIT_INSERT_DT, as these are automatically added for auditing purposes
by bettr to all tables.  If you wish to keep these from your source view,
use SRC_KEY and SRC_AUDIT_INSERT_DT.  If you pass KEY or AUDIT_INSERT_DT
anyway, this function will rename them to the "SRC_" alternate form
for you.  Passing both forms (such as KEY and SRC_KEY) will cause an error.

This should be all that is needed to create a flattened cache of highly
up-to-date view data without any configuration overhead.
}
