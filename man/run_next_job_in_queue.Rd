% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{run_next_job_in_queue}
\alias{run_next_job_in_queue}
\title{Run Next Project Job in Better Queue}
\usage{
run_next_job_in_queue(
  project = Sys.getenv("BETTR_TASK_GIT_PROJECT"),
  branch = Sys.getenv("BETTR_TASK_GIT_BRANCH"),
  incl_live_refresh = TRUE,
  return_result = FALSE,
  suppress_logging = FALSE
)
}
\arguments{
\item{project}{String name of the project, used to
filter for eligible jobs.}

\item{branch}{String name of the project branch, used
to filter for eligible jobs.}

\item{incl_live_refresh}{Boolean Indicates whether live
refresh tasks (with an opt_expiry_cache_mins > -1) should
be considered for the next job.  Defaults to TRUE.}

\item{return_result}{Boolean Indicates whether results
should be returned.  Result objects are useful for
debugging bug clutter up the job server log files.
Defaults to FALSE.}

\item{suppress_logging}{Boolean Suppresses the logging
of the subprocess standard out and error. Defaults to FALSE.}
}
\description{
This uses the provided git repository (project) and
branch name to query the host for the next runnable
job, being a whole group of tasks.
Note that this will attempt to rerun, in order, all
the tasks under the job, not just those expired,
errored, or not started.
This is the first job retrieved by this SQL:
\code{"{system.file(package = 'bettr')}/sql/BETTR_HOST/get_next_bettr_job.sql"}
}
